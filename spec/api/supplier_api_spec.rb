=begin
#Beanie ERP API

#An API specification for interacting with the Beanie ERP system

OpenAPI spec version: 0.2
Contact: dev@bean.ie
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Beanie::SupplierApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SupplierApi' do
  before do
    # run before each test
    @instance = Beanie::SupplierApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SupplierApi' do
    it 'should create an instance of SupplierApi' do
      expect(@instance).to be_instance_of(Beanie::SupplierApi)
    end
  end

  # unit tests for add_supplier
  # Creates a new supplier in the system
  # @param suppliers Supplier to add to the system
  # @param [Hash] opts the optional parameters
  # @return [Supplier]
  describe 'add_supplier test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_supplier_by_id
  # Find Supplier by ID
  # Returns a single supplier if the user has access
  # @param id ID of supplier to fetch
  # @param [Hash] opts the optional parameters
  # @return [Supplier]
  describe 'find_supplier_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_suppliers
  # All supplier
  # Returns all supplier from the system that the user has access to
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :tags tags to filter by
  # @option opts [Integer] :limit Maximum number of results to return
  # @return [Array<Supplier>]
  describe 'find_suppliers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
